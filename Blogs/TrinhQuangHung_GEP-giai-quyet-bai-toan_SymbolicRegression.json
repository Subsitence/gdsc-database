{
    "rawContent": "<div class= \"post-body \">\n    <h1 id= \"gioi-thieu \">1. Giới thiệu</h1>\n\n    <h2 id= \"sr-gioi-thieu \">1.1. Symbolic Regression</h2>\n    <p>\n        <strong>Symbolic Regression (SR) </strong>, mình sẽ gọi là hồi quy toán tử, là một loại bài toán hồi quay\n        mà tìm kiếm trong không gian các phép toán toán học nhằm tìm ra một mô hình toán học phù hợp nhất\n        với tập dữ liệu một cách chính xác và đơn giản nhất có thể.\n    </p>\n\n    <p>\n        Khái niệm có thể hơi phức tạp, nhưng một số ví dụ về hồi quy toán tử có thể thấy được\n        trong cuộc sống chúng ta như chúng ta có một tập các dữ liệu về thời tiết trong đó bao\n        gồm các số đo như độ ẩm, nhiệt độ, tốc độ gió, mức độ bốc hơi, ... và các kiểu hình thời tiết\n        như nắng, mưa, .... Chúng mong muốn tìm được mối quan hệ của tập dữ liệu về số đo này với các kiểu hình thời tiết thông qua một biểu thức (mô hình toán học) của những số liệu này để có thể dự đoán thời tiết trong tương lai. Đó là một ứng dụng của bài toán hồi quy toán tử\n    </p>\n\n    <figure>\n        <img\n            src= \"https://i.postimg.cc/C5bWhQ9J/Untitled.png \"\n            alt= \"Dự báo thời tiết \"\n        />\n        <figcaption>Dự báo thời tiết</figcaption>\n    </figure>\n    <p>\n        Trong bài toán hồi quy toán tử (SR), chúng ta sử dụng hàm lỗi trung bình bình phương gốc (Root-mean-square-error <strong>RMSE</strong>) để đánh giá một biểu thức có chính xác với tập dữ liệu không?\n    </p>\n    <figure>\n        <img\n            src= \"https://i.postimg.cc/htQ0tGwM/Screenshot-2021-11-07-155501.png \"\n            alt= \"RMSE \"\n        />\n        <figcaption>Hàm RMSE</figcaption>\n    </figure>\n    <h2 id= \"gep-gioi-thieu \">1.2. Genetic Expression Programming</h2>\n    <p>\n        Gene Expression Programming (GEP) là một thuật toán tiên hóa để tạo chương trình máy tính tự động. \n        Gene Expression Programming là một biến thể của Genetic Programming. Nó sử dụng chuỗi gen có độ dài cố định để mã hóa các biểu thức, và có thể tìm thấy lời giải đơn giản và dễ đọc một cách hiệu quả.\n        Trước hết chúng ta tìm hiểu một chút về Genetic Programming. Genetic Programming  là một kỹ thuật được tiên phong bởi John Koza cho phép máy tính giải quyết các bài toán mà không cần lập trình một cách tường minh. Genetic Programming hoạt động dựa trên giải thuật di truyền (Genetic Algorithms)\n    \n    </p>\n    <blockquote>\n        <p>\n            “It is not the strongest of the species that survives, nor the most intelligent, but the one most responsive to change” - <strong>Charles Darwin</strong>\n        </p>\n    </blockquote>\n    <p>\n        Câu nói trên của nhà sinh học nổi tiếng Charles Darwin, cha đẻ của Thuyết Tiến Hóa, có thể tóm tắt được hết tư tưởng chính của giải thuật di truyền (GA). Trong đó, hầu hết các chương trình máy tính được tạo ra bằng cách cải thiện luỹ tiến bằng cách lặp lại vòng lặp có sẵn để tạo ra các chương trình mới đúng đắn và tốt hơn đồng thời giữ lại những cái tốt và loại bỏ những thứ kém hơn. Điều này giống cách con người lập trình, tuy nhiên con người sử dụng các kĩ năng và tri thức để sửa chương trình tốt lên; GP, ở thời điểm hiện tại, không có các tri thức như vậy và phải dựa vào cơ hội, thử và sửa lỗi.\n    </p>\n    <p>\n        Phát triển lên từ Genetic Programming (GP), Gene Expression Programming (GEP) được giới thiệu bởi Ferriera vào đầu năm 2000. Trong thập kỷ qua, GEP đã được sử dụng rộng rãi trong nhiều ứng dụng bao gồm các vấn đề phân loại, dự đoán chuỗi thời gian và các dự đoán khác.\n    </p>\n    <h1 id =  \"thuat-toan \">2. Thuật toán</h1>\n    <h2 id =  \"bieu-dien \">2.1. Biểu diễn của một cá thể</h2>\n    <p>Các chương trình máy tính như công thức toán học và quy tắc logic thường được thể hiện bằng cây biểu thức (expression trees-ETs) với hai loại nút là function và terminal, trong đó function là các nút function như + - * / hay, sin, cos,... Còn terminal là các biến hay các hằng số như x,y,z,…. Trong GEP, các cá thể có thể hiểu là một biểu diễn gen tức là một nhiễm sắc thể (Gene Expression) và trong giải quyết bài toán Symbolic Regression thì nó là một biểu thức toán được viết theo kí pháp trước (prefix notation).\n    </p>\n\n    <figure>\n        <img\n            src =  \"https://i.postimg.cc/cJnKyyVK/Screenshot-2021-11-07-150655.png \"\n            alt=  \"Expression Tree \"\n        />\n        <figcaption>Expression Tree</figcaption>\n    </figure>\n\n    <p>\n        Trong GEP một cá thể được mã hóa bởi một hay nhiều gen. Mỗi gen là một chuỗi cố định bao gồm hai phần: Đầu(Head) và Đuôi(Tail). Phần đầu tiên (Head) có thể hình thành bởi cả function và terminal. Phần đuôi(Tail) thì chỉ được cấu tạo bởi các terminal. Mỗi gen có thể chuyển thành một biểu thức tương ứng nhờ duyệt theo thứ tự trước cây biểu thức của nó, cũng như ngược lại.\n    </p>\n    <figure>\n        <img\n            src =  \"https://i.postimg.cc/nzxq3hCV/Screenshot-2021-11-07-150655.png \"\n            alt=  \"Gene Expression \"\n        />\n        <figcaption>Chuỗi gen của cá thể biểu diễn cho biểu thức và cây biểu thức trên</figcaption>\n    </figure>\n    <p>Tuy nhiên để đảm bảo khả năng một chuỗi gen của cá thể trong thuật toán GEP có thể chuyển hóa thành một biểu thức hợp lệ, thì chuỗi gen đó phải tuân theo ràng buộc sau</p>\n    <code> l = u (h-1) + 1</code>\n    <p>Trong đó: <strong> l </strong> là độ dài của phần đuôi của chuỗi gen, <strong> h </strong> là độ dài của phần đầu của chuỗi gen, <strong>u</strong> là số nút con tối đa của một nút function hoặc chính là số lượng tham số lớn nhất của hàm nào đó trong biểu thức</p>\n    <h2 id =  \"thuat-toan-truyen-thong \">2.2. Thuật toán truyền thống</h2>\n    <p>Thuật toán GEP truyền thống sẽ bắt đầu với<strong> Khởi tạo quần thể</strong> và sau đó lặp lại các vòng lặp cho đến khi tìm được cá thể phù hợp. Vòng lặp bao gồm các bước bao gồm: <strong> Đánh giá phù hợp</strong>, <strong>Lựa chọn và sao chép</strong> , <strong>Đột biến</strong>,<strong> Chuyển vị </strong>,<strong> Tái tổ hợp.</strong> </p>\n    <figure>\n        <img\n            src =  \"https://i.postimg.cc/855TQxX8/Screenshot-2021-11-07-153434.png \"\n            alt=  \"Traditional Algorithms \"\n        />\n        <figcaption>Traditional Algorithm</figcaption>\n    </figure>\n    <h3 id= \"khoi-tao-quan-the \">2.2.1. Khởi tạo quần thể</h3>\n    <p>Khởi tạo(Initialization): Bước đầu tiên là tạo ra một tập hợp các nhiễm sắc thể ngẫu nhiên để tạo thành một quần thể ban đầu. Đối với mỗi nhiễm sắc thể, mỗi thành phần của các chuỗi có độ dài cố định là ngẫu nhiên được gán dựa trên loại phần tử (head hoặc tail). Các thành phần thuộc phần đầu là function và terminal, trong khi các yếu tố thuộc phần đuôi là terminal.\n    </p>\n    <h3 id= \"danh-gia-do-phu-hop \">2.2.2. Đánh giá độ phù hợp</h3>\n    <p>Trong bước này, các nhiễm sắc thể sẽ được đánh giá thông qua một hàm cụ thể thoả mãn một ràng buộc cho trước nếu nhiễm sắc thể đủ tốt sẽ kết thức thuật toán, nếu không sẽ đến bước tiếp theo. Trong thuật toán truyền thống để giải quyết bài toán SR, chúng ta sử dụng hàm RMSE như đã nói ở trên.</p>\n    <h3 id= \"chon-loc \">2.2.3. Chọn lọc</h3>\n    <p> Bước này ta sẽ chọn các nhiễm sắc thể tốt hơn trong tập các nhiễm sắc thể trước để tạo ra một quần thể mới hay thế hệ quần thể mới (Dựa trên một số phương pháp như roulette-wheel hoặc k-tournament). Tuy nhiên trong bài toán truyền thống, chúng ta sẽ sử dụng phương pháp roulette wheel. </p>\n    <figure>\n        <img\n            src =  \"https://i.postimg.cc/brzhqWwH/Screenshot-2021-11-07-160112.png \"\n            alt=  \"Roulette wheel \"\n        />\n    </figure>\n    <p> Có thể hiểu đơn giản ý tưởng như sau, tùy thuộc vào độ đo mức độ phù hợp ở bước trước thì một cá thể trong quần thể sẽ chiếm một phần lớn hay nhỏ trên bánh xe này. Cá thể với chỉ số phù hợp cao hơn sẽ chiếm phần lớn hơn và ngược lại. Để hình thành một quần thể mới với <strong>NP</strong> cá thể từ quần thể cũ, thì chúng ta sẽ quay bánh xe này <strong>NP</strong> lần với NP là một siêu tham số chúng ta định nghĩa trước. Nhờ phương pháp này, những cá thể có khả năng thích nghi cao sẽ có cơ hội giữ lại cao hơn, đó phản ánh quy luật của chọn lọc tự nhiên</p>\n    <h3 id= \"dot-bien \">2.2.4. Đột biến</h3>\n\n    <p>Trong bước này, mỗi phần tử ở bất kỳ vị trí nào của mỗi nhiễm sắc thể đều có thể thay đổi ngẫu nhiên với tỷ lệ đột biến p được xác định trước. Yếu tố đột biến sẽ được lấy ra từ tập các phần tử tạo ra nhiễm sắc thể phù hợp với head và tail.</p>\n    <h3 id= \"chuyen-vi \">2.2.5. Chuyển vị</h3>\n    <p>\n        Hoạt động chuyển vị nhằm thay đổi một số yếu tố liên tiếp của nhiễm sắc thể bằng một phân đoạn của các yếu tố liên tiếp trong cùng một nhiễm sắc thể. Nó chứa ba bước phụ:\n    </p>\n    <p> + IS-transposition: Chuyển vị một phần gen từ gen này sang gen khác</p>\n    <p> + RIS-transposition: Chuyển vị một phần gen trong cùng một gen</p>\n    <p> + Gene-transposition: Chuyển vị toàn bộ nhiễm sắc thể</p>\n    <figure>\n        <img\n            src =  \"https://i.postimg.cc/zvCPGFfC/Screenshot-2021-11-07-161900.png \"\n            alt=  \"transposition \"\n        />\n        <figcaption>Ví dụ chuyển vị gene</figcaption>\n    </figure>\n    <h3 id= \"tai-to-hop \">2.2.6. Tái tổ hợp</h3>\n    <p>Mục đích của hoạt động tái tổ hợp là để trao đổi thông tin gen của hai nhiễm sắc thể mẹ để tạo ra hai con. Hoạt động chứa ba bước phụ: Tái tổ hợp một điểm, tái tổ hợp hai điểm và gen, tái tổ hợp. Trong tái tổ hợp gen, một gen của một cha mẹ được chọn ngẫu nhiên. Sau đó, gen đã chọn được trao đổi với gen tương ứng của cha mẹ khác để tạo ra hai con.\n        </p>\n        <figure>\n            <img\n                src =  \"https://i.postimg.cc/X7wpnGkn/Screenshot-2021-11-07-162350.png \"\n                alt=  \"recombination \"\n            />\n            <figcaption>Ví dụ tái tổ hợp gen</figcaption>\n        </figure>\n\n    <h1 id =  \"ket-qua \">3. Kết quả thử nghiệm</h1>\n    <p> Do bài viết khá dài, mình sẽ không tập trung về vấn đề lập trình. Nếu mọi người quan tâm có thể ghé thăm github của mình để tham khảo về mặt lập trình cũng như các biến thể bổ sung cho phương pháp truyền thống</p>\n    <figure>\n        <img\n            src =  \"https://i.postimg.cc/VkJpgnv5/report50.png \"\n            alt=  \"ketqua \"\n        />\n        <figcaption></figcaption>\n    </figure>\n    <p> Bên trên là hình ảnh kết quả thử nghiệm của khi chúng ta sử dụng thuật toán GEP đê giải quyết bài toán hồi quy toán tử (SR). Để tạo tập dữ liệu cho bài toán này, chúng ta sử dụng <strong>hàm</strong> cho trước và tính toán target của tập dữ liệu của mình từ tập các input ngẫu nhiên. Từ đó, chúng ta áp dụng giải thuật GEP để tìm kiếm lại được <strong>hàm</strong> đó. Ở lần chạy thử nghiệm trên, chúng ta đang sử dụng hàm F8 trong bộ benchmark này để thử nghiệm</p>\n    <figure>\n        <img\n            src =  \"https://i.postimg.cc/wB1yQh1W/Screenshot-2021-11-07-164509.png \"\n            alt=  \"benchmark \"\n        />\n        <figcaption>Bộ benchmark cho so sánh với các bài toán</figcaption>\n    </figure>\n    <p> Trong đó U[a, b, c] nghĩa là chúng ta sẽ khởi tạo c bộ dữ liệu gồm input hay tham số đầu vào được khởi tạo ngẫu nhiên trong khoảng (a, b) và target được tính toán nhờ hàm với các tham số đầu vào</p>\n    <p> Để đánh giá một quần thể chúng ta sẽ quan sát hai chỉ số đó là trung bình thích nghi của cả quần thể và cá thể thích nghi lớn nhất của quần thể đó. Chúng ta có thể thấy được độ giảm của hai chỉ số qua các thế hệ thể hiện quần thể chúng ta đang tiến hóa để tìm được lời giải là <strong>hàm</strong> gần chính xác với hàm mục tiêu nhất và cho đến khi trong quần thể, có xuất hiện một cá thể giống với hàm mục tiêu cần tìm tức chính là lúc thuật toán kết thúc</p>\n    <h1 id =  \"ket-luan \">4. Kết luận</h1>\n    <p>\n        Qua bài viết, chúng ta hiểu biết tư tưởng cơ bản của giải thuật GEP trong việc giải quyết bài toán hồi quy toán tử. Những khái niệm, hiểu biết cơ bản này rất quan trọng trong việc tìm hiểu thêm và sâu hơn những biến thể hay ứng dụng của thuật toán GEP. Cảm ơn các bạn đã đọc bài viết này\n    </p>\n</div> ",
    "authorName": "Hung Trinh",
    "timeRelease": "2021-11-08T00:00:00Z",
    "timeCreate": "2021-11-07T19:21:50Z",
    "title": "Giải thuật Gene Expression Programming giải quyết bài toán Symbolic Regression ",
    "subTitle": "Sử dụng giải thuật GEP không những giúp bạn giải quyết bài toán hồi quy toán tử mà còn nhiều bài toán khác nữa",
    "coverImgUrl": "https://i.postimg.cc/zBD3d6XF/7Delta.png",
    "thumbnailImgUrl": "https://i.postimg.cc/qvRT5r8R/download.png",
    "blogTag": ["Algorithms", "Genetic Algorithms"]
  }