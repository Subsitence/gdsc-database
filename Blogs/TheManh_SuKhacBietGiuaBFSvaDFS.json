{
  "rawContent": "<div class=\"post-body\">\n    <h1 id=\"su-khac-biet-giua-bfs-va-dfs\">Sự khác biệt giữa BFS và DFS</h1>\n    <p>\n        Sự khác biệt chính giữa BFS và DFS là BFS tiến hành theo cấp độ trong khi DFS theo sau một đường dẫn từ nút bắt\n        đầu đến nút kết thúc (đỉnh),\n        sau đó là một đường dẫn khác từ đầu đến cuối, và cho đến khi tất cả các nút được truy cập.\n        Hơn nữa, BFS sử dụng hàng đợi để lưu trữ các nút trong khi DFS sử dụng ngăn xếp để duyệt qua các nút.\n    </p>\n    <p>\n        BFS và DFS là các phương thức di chuyển ngang được sử dụng trong tìm kiếm đồ thị.\n        Biểu đồ truyền tải là quá trình truy cập tất cả các nút của biểu đồ.\n        Biểu đồ là một nhóm các đỉnh &#x27;V&#x27; và Edges &#x27;E&#x27; kết nối với các đỉnh.\n    </p>\n    <h1 id=\"dinh=nghia-cua-bfs\">Định nghĩa của BFS</h1>\n    <p><strong>Breadth First Search (BFS)</strong>\n        là phương pháp di chuyển ngang được sử dụng trong biểu đồ.\n        Nó sử dụng một hàng đợi để lưu trữ các đỉnh đã truy cập.\n        Trong phương pháp này, phần nhấn mạnh nằm trên các đỉnh của đồ thị, một đỉnh được chọn lúc đầu sau đó được truy\n        cập và đánh dấu.\n        Các đỉnh liền kề với đỉnh được truy cập sau đó được truy cập và lưu trữ trong hàng đợi một cách tuần tự. Tương\n        tự, các đỉnh được lưu trữ sau đó được xử lý từng cái một và các đỉnh liền kề của chúng được truy cập.\n        Một nút được khám phá đầy đủ trước khi truy cập bất kỳ nút nào khác trong biểu đồ, nói cách khác, nó đi qua các\n        nút chưa được khám phá nông nhất trước tiên.\n    </p>\n    <figure>\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/4/46/Animated_BFS.gif\"/>\n    </figure>\n    <pre>\n            <code class=\"language-java\">\n                import java.util.LinkedList;\n                import java.util.Queue;\n                class BreadthFistSearch{\n                    //  Breadth-First Search with directed graphs \n                    //  The problem is to find out if there is a path from one vertex to another\n                    static boolean BFS(int a, int b, int[][] G, int n){\n                        Queue&lt;Integer&gt; fringer = new LinkedList&lt;&gt;();\n                        Queue&lt;Integer&gt; close = new LinkedList&lt;&gt;();\n                        fringer.add(a); // push a in the queue\n                        while(fringer.peek() != null){    // return &quot;null&quot; if queue = hollow\n                            int direct = fringer.poll();\n                            if(direct == b){\n                                return true;\n                            }else{\n                                close.add(direct);\n                            }\n                            for(int i = 0; i &lt; G.length; i++){\n                                if(G[i][0] == direct){\n                                    fringer.add(G[i][1]);\n                                }\n                            }\n                        }\n                        return false;\n                    }\n                    public static void main(String[] args) {\n                        int n = 8;    // Number of vertices given by the problem\n                        int[][] G = {{1,2}, {1,3}, {2,4}, {2,5}, {3,6}, {3,7}, {5,8}}; //Array g stores the paths of the vertices \n                        System.out.println(BFS(3, 4, G, n));    // result : false\n                        System.out.println(BFS(1, 7, G, n));    // result : true\n                    }\n                }\n            </code>\n        </pre>\n    <h1 id=\"dinh-nghia-cua-dfs\">Định nghĩa của DFS</h1>\n    <p>\n        Phương pháp di chuyển ngang <strong>tìm kiếm sâu (DFS)</strong>\n        sử dụng ngăn xếp để lưu trữ các đỉnh đã truy cập. DFS là phương pháp dựa trên cạnh và hoạt động theo kiểu đệ quy\n        trong đó các đỉnh được khám phá dọc theo một đường dẫn (cạnh).\n        Việc thăm dò một nút bị đình chỉ ngay khi tìm thấy một nút chưa được khám phá khác và các nút chưa được khám phá\n        sâu nhất được duyệt qua trước hết.\n        DFS di chuyển / truy cập mỗi đỉnh chính xác một lần và mỗi cạnh được kiểm tra chính xác hai lần.\n    </p>\n    <figure>\n        <img src=\"https://wiki.gladiabots.com/images/7/7f/Depth-First-Search.gif\"/>\n    </figure>\n    <pre>\n            <code class=\"language-java\">\n                import java.util.Stack;\n                public class Depthfirstsearch {\n                static boolean DFS(int a, int b, int[][] G){\n                    Stack&lt;Integer&gt; fringer = new Stack&lt;&gt;();\n                    Stack&lt;Integer&gt; close = new Stack&lt;&gt;();\n                    fringer.push(a);    // push a in the queue\n                    while(!fringer.empty()){    // return &quot;null&quot; if queue = hollow\n                        int direct = fringer.pop();\n                        if(direct == b) {\n                            return true;\n                        } else {\n                            close.push(direct);\n                        }\n                        for(int i = 0; i &lt; G.length; i++) {\n                            if(G[i][0] == direct){\n                                fringer.push(G[i][1]);\n                            }\n                        }\n                    }\n                    return false;\n                }\n                public static void main(String[] args) {\n                    int n = 8;    // Number of vertices given by the problem\n                    int[][] G = {{1,2}, {1,3}, {2,4}, {2,5}, {3,6}, {3,7}, {5,8}}; //Array g stores the paths of the vertices \n                    \n                    System.out.println(DFS(1, 8, G));    // result : true\n                    System.out.println(DFS(2, 7, G));    // result : false\n                }\n            }\n            </code>\n        </pre>\n    <blockquote>\n        <h1 id=\"su-khac-biet-chinh-giua-bfs-va-dfs\"><strong>Sự khác biệt chính giữa BFS và DFS</strong></h1>\n        <ul>\n            <li>BFS là thuật toán dựa trên đỉnh trong khi DFS là thuật toán dựa trên cạnh.</li>\n            <li>Cấu trúc dữ liệu hàng đợi được sử dụng trong BFS. Mặt khác, DFS sử dụng stack hoặc đệ quy.</li>\n            <li>Không gian bộ nhớ được sử dụng hiệu quả trong DFS trong khi sử dụng không gian trong BFS không hiệu\n                quả.\n            </li>\n            <li>BFS là thuật toán tối ưu trong khi DFS không tối ưu.</li>\n            <li>DFS xây dựng cây hẹp và dài. Như chống lại, BFS xây dựng cây rộng và ngắn.</li>\n        </ul>\n    </blockquote>\n    <h1 id=\"ket-luan\">Kết Luận</h1>\n    <p>BFS và DFS, cả hai kỹ thuật tìm kiếm đồ thị có thời gian chạy tương tự nhưng tiêu thụ không gian khác nhau,\n        DFS chiếm không gian tuyến tính vì chúng ta phải nhớ đường dẫn đơn với các nút chưa được khám phá,\n        trong khi BFS giữ mọi nút trong bộ nhớ.\n    </p>\n    <p>DFS mang lại giải pháp sâu hơn và không tối ưu, nhưng nó hoạt động tốt khi giải pháp dày đặc trong khi BFS là tối\n        ưu để tìm kiếm mục tiêu tối ưu lúc đầu.</p>\n</div>",
  "authorName": "The Manh",
  "timeRelease": "2021-11-07T12:40:50Z",
  "timeCreate": "2021-11-07T0:40:50Z",
  "title": "Sự khác biệt giữa BFS và DFS",
  "subTitle": "Các Thuật toán tìm kiếm cơ bản",
  "coverImgUrl": "https://i.postimg.cc/pVFTfSV6/133641824-2818668111691256-3500901988400092926-n.jpg",
  "thumbnailImgUrl": "https://cs.lmu.edu/~ray/images/searchtree.png",
  "blogTag": [
    "Algorithm"
  ]
}